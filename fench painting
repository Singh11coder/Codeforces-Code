#include <bits/stdc++.h>
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>

using namespace std;
// using namespace __gnu_pbds;

// less for increasing set, greater for decreasing set, less_equal and greater_equal for multiset
// typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pbds;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<int, int> pi;
typedef pair<int, pi> pipi;
typedef pair<ll, pll> plpll;
typedef vector<int> vi;
typedef vector<bool> vb;
typedef vector<ld> vld;
typedef vector<ll> vl;
typedef vector<vi> vvi;
typedef vector<vl> vvl;
typedef vector<vvi> vvvi;
typedef vector<vvl> vvvl;
typedef vector<vl> vvl;
typedef vector<pll> vpll;
#define x first
#define y second
#define all(arr) arr.begin(), arr.end()
#define mp(a, b) make_pair(a, b)
#define pb(a) emplace_back(a)
const ll INF = LONG_LONG_MAX;
const int inf = INT_MAX;
const ll mod = (1e9 + 7);
const char nline = '\n';
const ll maxEl = 1e6;
const int LOG = 18;

ifstream input("input.txt");
ofstream output("output.txt");

void solve()
{
    ll n, m; cin >> n >> m;
    vl a(n+1), b(n+1), c(m);
    vvl noChange(n+1), change(n+1);
    for(int i = 1; i <= n; i++) cin >> a[i];
    
    for(int i = 1; i <= n; i++)
    {
        cin >> b[i];
        if(a[i] == b[i])
        {
            noChange[a[i]].push_back(i);
        }
        else
        {
            change[b[i]].push_back(i);
        }
    }
    map<int, int> count;
    for(int i = 0; i < m; i++)
    {
        cin >> c[i];
        count[c[i]]++;
    }

    for(int i = 1; i <= n; i++)
    {
        if(count[i] < (int)change[i].size())
        {
            cout << "No" << nline;
            return;
        }
    }
    if((int)change[c[m-1]].size() == 0 && (int)noChange[c[m-1]].size() == 0)
    {
        cout << "No" << nline;
        return;
    }
    
    cout << "Yes" << nline;

    int bakra;
    if((int)change[c[m-1]].size() != 0) bakra = change[c[m-1]][0];
    else bakra = noChange[c[m-1]][0];

    for(int i = 0; i < m; i++)
    {
        int color = c[i];
        if((int)change[color].size() > 0)
        {
            cout << *(change[color].rbegin()) << ' ';
            if((int)change[color].size() > 1) change[color].pop_back();
            // change[color].pop_back();
        }
        else if((int)noChange[color].size() > 0)
        {
            cout << noChange[color][0] << ' ';
        }
        else
        {
            cout << bakra << ' ';
        }
    }
    cout << nline;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    int t = 1;
    cin >> t;
    for (int i = 1; i <= t; i++)
    {
        solve();
    }
}
